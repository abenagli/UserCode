/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "SuperCrystalBall.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(SuperCrystalBall) 

 SuperCrystalBall::SuperCrystalBall(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _norma,
                        RooAbsReal& _mean,
                        RooAbsReal& _sigma,
                        RooAbsReal& _alpha,
                        RooAbsReal& _n,
                        RooAbsReal& _alpha2,
                        RooAbsReal& _n2) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   norma("norma","norma",this,_norma),
   mean("mean","mean",this,_mean),
   sigma("sigma","sigma",this,_sigma),
   alpha("alpha","alpha",this,_alpha),
   n("n","n",this,_n),
   alpha2("alpha2","alpha2",this,_alpha2),
   n2("n2","n2",this,_n2)
 { 
 } 


 SuperCrystalBall::SuperCrystalBall(const SuperCrystalBall& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   norma("norma",this,other.norma),
   mean("mean",this,other.mean),
   sigma("sigma",this,other.sigma),
   alpha("alpha",this,other.alpha),
   n("n",this,other.n),
   alpha2("alpha2",this,other.alpha2),
   n2("n2",this,other.n2)
 { 
 } 



 Double_t SuperCrystalBall::evaluate() const 
 { 
  if( (x-mean)/sigma > fabs(alpha) )  
    {
      double A = pow(n/fabs(alpha), n) * exp(-0.5 * alpha*alpha);
      double B = n/fabs(alpha) - fabs(alpha);
    
      return norma * A * pow(B + (x-mean)/sigma, -1.*n);
    }
  
  else if( (x-mean)/sigma < -1.*fabs(alpha2) )
    {
      double A = pow(n2/fabs(alpha2), n2) * exp(-0.5 * alpha2*alpha2);
      double B = n2/fabs(alpha2) - fabs(alpha2);
    
      return norma * A * pow(B - (x-mean)/sigma, -1.*n2);
    }
  
  else
    {
      return norma * exp(-1. * (x-mean)*(x-mean) / (2*sigma*sigma) );
    } 
  return 0. ;  
 } 



