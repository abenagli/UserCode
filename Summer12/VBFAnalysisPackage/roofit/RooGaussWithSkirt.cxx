/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// skeleton generated like this: 
// RooClassFactory::makePdf("RooGaussWithSkirt","x,norma,mean,sigma,alphaL,alphaR") ;

#include "Riostream.h" 

#include "RooGaussWithSkirt.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooGaussWithSkirt) 

 RooGaussWithSkirt::RooGaussWithSkirt(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _norma,
                        RooAbsReal& _mean,
                        RooAbsReal& _sigma,
                        RooAbsReal& _alphaL,
                        RooAbsReal& _alphaR) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   norma("norma","norma",this,_norma),
   mean("mean","mean",this,_mean),
   sigma("sigma","sigma",this,_sigma),
   alphaL("alphaL","alphaL",this,_alphaL),
   alphaR("alphaR","alphaR",this,_alphaR)
 { 
 } 


 RooGaussWithSkirt::RooGaussWithSkirt(const RooGaussWithSkirt& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   norma("norma",this,other.norma),
   mean("mean",this,other.mean),
   sigma("sigma",this,other.sigma),
   alphaL("alphaL",this,other.alphaL),
   alphaR("alphaR",this,other.alphaR)
 { 
 } 



 Double_t RooGaussWithSkirt::evaluate() const 
 { 
  if( x > (mean+alphaR*sigma) )
    {
      double N = norma / sigma / sqrt(2.*3.14159) * exp( 0.5*alphaR*alphaR + alphaR/sigma*mean );
      double K = alphaR/sigma;

      return N * exp(-1.*K*x);
    }
  else if( x > (mean-alphaL*sigma) )
    {
      return norma / sigma / sqrt(2.*3.14159) * exp(-1.*(x-mean)*(x-mean)/(2.*sigma*sigma));
    }
  else
    {
      double N = norma / sigma / sqrt(2.*3.14159) * exp( 0.5*alphaL*alphaL - alphaL/sigma*mean );
      double K = alphaL/sigma;

      return N * exp(1.*K*x);
    }
 } 



